////동적으로 메소드 추가////////////////////////////////////
var Member = function (firstName,lastName){
    this.firstName = firstName;
    this.lastName = lastName;
};

var mem = new Member('창희','문');
mem.Name = function(){  //생성된 인스턴스에 대해서 메소드를 추가한거이므로
    return this.lastName + '' +this.firstName; // 다른 인스턴스에서 이 메소드르사용할수없다
}                       //동일한 클래스를 기초로 생성된 인스턴스라 할지라도 각각이 지닌 
                        //멤버가 동일하다고 한정할 수 없다..
console.log(mem.Name());


////프로토 타입 /////////////////////////////////////////////////
var Member = function(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}


var mem = new Member('창희','문');


Member.prototype.getName = function(){ //프로포타입 메소드 추가 형태
    return this.lastName + this.firstName;
}

console.log(mem.getName());

var mem2 = new Member('길동','홍');
console.log(mem2.getName());

//////////////프로토타입 객체 리터럴로 정의하기/////////////////////

var Member = function(first,second){
    this.first = first;
    this.second = second;
}
Member.prototype = {
getName : function(){
    
    //함수실행문
},
toString : function(){
    
    //함수실행문

}

};


252p 생성자의 문제점 
	클래스에 메소드가있으면 해당클래스를 인스턴스화 시킬때마다 같은메소드를 복사하기때문에
	메모리를 많이 소비한다 

메소드는 프로토타입으로 선언한다
	객체에 멤버를 추가하기위해 프로토타입이라고하는 프로퍼티를 준비한다.
	protoytype 프로퍼티에 대해 추가된 멤버는 그 클래스를 기초로 생성된 모든 인스턴스에서
	이용할수 있다...

프로토타입 객체를 사용한 메소드 정의의 두가지 이점
	프로토타입 객체의 내용은 베이스가 되는 객체로부터 암묵적으로 참조만 될뿐 인스턴스에 복사되는것은 아니다.
	객체의 멤버가 호출되었을때 
	1.인스턴스 측에 요구된 멤버가 존재하지 않는지 확인
	2.존재하지 않는 경우에는 암묵적인 참조를 통해 프로토타임 객체를 검색
	
프로토타입 프로퍼티 설정
	프로토타입으로 메소드 추가후 인스턴스화를 해주고 인스턴스객체에서 해당 메소드 값을 변경하면 그 메소드를
	가지게 된다(독자적인 프로퍼티값) 그메소드를 삭제하면 다시 베이스 객체의 프로토타입 메소드를 참조한다.. 
	그냥 값을 변경하지 않고 참조만 하는 인스턴스객체에서는 해당 메소드 삭제시 참조만하기때문에 삭제가 
	불가능하고 참조값이 그대로 출력된다	256p


	
	
	
	
